#!/usr/bin/env perl
# Woger - make a release
# Welease 14
# (c) Reuben Thomas 2007, 2008, 2009, 2010, 2011
# Released under the GPL version 3, or (at your option) any later
# version.

# Dependencies:
#   For email: mail
#   For SourceForge: copher: http://copher.sourceforge.net/
#   For Freshmeat: Snake Steak: http://repo.cat-v.org/snake_steak/

# FIXME: Add methods rsync (for web site), log (to announce on my log)

use warnings;
use strict;

use File::Basename;
use Term::ReadLine;
use Perl6::Slurp;
use Text::Wrap;

my $prog = basename($0);

my $term = Term::ReadLine->new($prog);


# Release methods

my %releaser = ();
my @methods;
my $package;
my $package_name;
my $version;
my $description;
my $notes;
my $url;

%{$releaser{null}} = (
  release => sub {
  }
 );

%{$releaser{sourceforge}} = (
  getinfo => sub {
    my $self = shift;
    $$self{user} = $term->readline("SourceForge login: ");
    $$self{password} = $term->readline("Password: "); # FIXME: Hide password
  },
  release => sub {
    my $self = shift;
    system("copher", "-u", $$self{user}, "-P", $$self{password}, "-p",
      $package, "-k", $package, "-r", $version, "-N", $notes, "$package-$version.tar.gz") == 0
        or die "copher failed\n";
    unlink "out.html";
  }
 );

%{$releaser{freshmeat}} = (
  release => sub {
    my $self = shift;
    open(FILE, "|-", "ss.py", "release", "$package", "$version");
    print FILE slurp($notes);
    close FILE or die "Snake Steak failed\n";
  }
 );

%{$releaser{"lua-l"}} = (
  release => sub {
    my $release_notes = slurp($notes);
    $url ||= "http://luaforge.net/projects/$package";
    my $message = <<END;
I am happy to announce the release of $package_name $version,
$description.

$release_notes

Get it from $url
END
    mail("lua-l\@lists.lua.org", "[ANN] $package_name $version released", $message);
  }
 );


sub mail {
  my ($address, $subject, $body) = @_;
  open(FILE, "|-", "mail", "-s", $subject, $address);
  print FILE wrap('', '', ($body));
  close FILE or die "mail failed\n";
}

if ($#ARGV < 5 || $#ARGV > 6) {
 my $methods = join ", ", keys %releaser;
 die <<END if $#ARGV != 5;
Usage: $prog METHODS PACKAGE NAME VERSION DESCRIPTION NOTES [URL]
Make a release

  METHODS is a comma-separated list of methods, from:
    $methods
  PACKAGE is the package base name
  NAME is the package text name
  VERSION is the version number
  DESCRIPTION is the short project description
  NOTES is the release notes file (need not exist)
  URL is the home page URL
END
}

# Get arguments
@methods = split /,/, shift;
$package = shift;
$package_name = shift;
$version = shift;
$description = shift;
$notes = shift;
$url = shift;

# Write release notes if non-existent
if (!-e $notes) {
  die "VISUAL is not set; please set it!\n"
    if -z $ENV{VISUAL};
  system($ENV{VISUAL}, $notes) == 0 or die "editor failed\n";
}

# Filter out unknown methods
@methods = grep {
  if (!defined ($releaser{$_})) {
    warn "no method $_; ignoring\n";
    0;
  } else {
    1;
  }
} @methods;

# Welease!
for my $method (@methods) {
  $releaser{$method}{getinfo}($releaser{$method})
    if $releaser{$method}{getinfo};
}
for my $method (@methods) {
  $releaser{$method}{release}($releaser{$method});
}
